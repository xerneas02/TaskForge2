@page "/inscription"
@using System.Text.RegularExpressions
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@using System
@using Newtonsoft.Json


<body>
    <form @onsubmit="HandleFormSubmit">
        <h3>Inscription</h3>
        <div>
            <input type="text" id="username" name="username" placeholder="Nom d'utilisateur" required @oninput="UpdateUsername" @onblur="(e) => ValidateUsername()" />
            <div style="color:red;">@usernameError</div>
        </div>
        <div>
            <input type="email" id="email" name="email" placeholder="Adresse e-mail" required @oninput="UpdateEmail" @onblur="(e) => ValidateEmail()" />
            <div style="color:red;">@emailError</div>
        </div>
        <div>
            <input type="date" id="birthdate" name="birthdate" required @oninput="UpdateBirthday" @onblur="(e) => ValidateBirthday()" />
            <div style="color:red;">@birthdateError</div>
        </div>
        <div>
            <input type="password" id="password" name="password" placeholder="Mot de passe" required @oninput="UpdatePassWord" @onblur="(e) => ValidatePassword()" />
            <div style="color:red;">@passwordError</div>
        </div>
        <div>
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirmer le mot de passe" required @oninput="UpdateConfirmPassWord" @onblur="(e) => ValidateConfirmPassword()" />
            <div style="color:red;">@confirmPasswordError</div>
        </div>
        <button type="submit">S'inscrire</button>
    </form>
</body>

@code {
    private string username = "";
    private string email = "";
    private DateTime birthdate;
    private string password = "";
    private string confirmPassword = "";

    private string usernameError = "";
    private string emailError = "";
    private string birthdateError = "";
    private string passwordError = "";
    private string confirmPasswordError = "";

    [Inject] private NavigationManager? navigation {get; set; }

    private List<UserDTO>? users;

    private async Task HandleFormSubmit()
    {
        if (ValidateUsername() && ValidateEmail() && ValidateBirthday() && ValidatePassword() && ValidateConfirmPassword() && navigation != null)
        {
            await PostUser();
            navigation.NavigateTo("/login", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => GetUserList());
    }

    private string GetConcatenatedEmails()
    {
        if(users != null) 
            return string.Join(", ", users.Select(user => user.Email));

        return "";
    }

    private void GetUserList()
    {
        try
        {
            using (HttpClient httpClient = new HttpClient())
            {
                string usersApiUrl = "http://localhost:5000/api/User";
                HttpResponseMessage response = httpClient.GetAsync(usersApiUrl).Result;

                if (response.IsSuccessStatusCode)
                {
                    string jsonResult = response.Content.ReadAsStringAsync().Result;
                    users = JsonConvert.DeserializeObject<List<UserDTO>>(jsonResult)!;
                }
                else
                {
                    throw new Exception($"Failed to retrieve random Utilisateur template. Status code: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"An error occurred while getting a random Utilisateur template: {ex.Message}");
        }
    }

    private async Task<bool> PostUser()
    {
        try
        {
            var newUser = new UserCreateModel
            {
                Name = username,
                Email = email,
                Password = password
            };

                using (HttpClient httpClient = new HttpClient())
                {
                    string usersApiUrl = "http://localhost:5000/api/User/register";
                    string jsonContent = JsonConvert.SerializeObject(newUser);
                    StringContent content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

                HttpResponseMessage response = await httpClient.PostAsync(usersApiUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    throw new Exception($"Failed to register user. Status code: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            throw new Exception($"An error occurred while registering user: {ex.Message}");
        }
    }

    private void UpdateUsername(ChangeEventArgs e) {username = e.Value!.ToString()!;}
    private void UpdateEmail(ChangeEventArgs e) {email = e.Value!.ToString()!;}
    private void UpdateBirthday(ChangeEventArgs e) 
    { 
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime result))
        {
            birthdate = result;
        }
    }
    private void UpdatePassWord(ChangeEventArgs e) {password = e.Value!.ToString()!;}
    private void UpdateConfirmPassWord(ChangeEventArgs e) {confirmPassword = e.Value!.ToString()!;}

    private async Task<bool> validateForm()
    {
        if (ValidateUsername() && ValidateEmail() && ValidateBirthday() && ValidatePassword() && ValidateConfirmPassword())
        {
            await PostUser();
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool ValidateUsername()
    {
        if (username.Contains(" "))
        {
            usernameError = "Le nom d'utilisateur ne doit pas contenir d'espaces";
            return false;
        }

        if (username.Length < 5)
        {
            usernameError = "Le nom d'utilisateur doit avoir au moins 5 caractères.";
            return false;
        }

        usernameError = "";
        return true;
    }

    private bool ValidateEmail()
    {
        string emailPattern = @"^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$";
        if (string.IsNullOrWhiteSpace(email) || !Regex.IsMatch(email, emailPattern))
        {
            emailError = "L'adresse email n'est pas valide.";
            return false;
        }

        if (users != null && users.Any(u => u.Email == email))
        {
            emailError = "L'adresse email est déjà existante.";
            return false;
        }

        emailError = "";
        return true;
    }

    private bool ValidateBirthday()
    {
        if (birthdate == DateTime.MinValue || DateTime.Now.Subtract(birthdate).TotalDays < 4745)
        {
            if (DateTime.Now.Subtract(birthdate).TotalDays < 0)
            {
                birthdateError = "Date invalide";
                return false;
            }
            birthdateError = "Vous devez avoir au moins 13 ans.";
            return false;
        }

        birthdateError = "";
        return true;
    }

    private bool ValidatePassword()
    {
        bool hasUpperCase = password.Any(char.IsUpper);
        bool hasDigit = password.Any(char.IsDigit);
        bool hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));
        bool hasMinLength = password.Length >= 12;

    if (!hasUpperCase) {
        passwordError = "Le mot de passe doit contenir au moins une lettre majuscule";
        return false;
    }
    else if (!hasDigit) {
        passwordError = "Le mot de passe doit contenir au moins une chiffre";
        return false;
    }
    else if (!hasSpecialChar) {
        passwordError = "Le mot de passe doit contenir au moins un caractère spécial";
        return false;
    }
    else if (!hasMinLength) {
        passwordError = "Le mot de passe doit avoir une longueur d'au moins 12 caractères.";
        return false;
    }

        passwordError = "";
        return true;
    }

    private bool ValidateConfirmPassword()
    {
        if (confirmPassword != password)
        {
            confirmPasswordError = "Le mot de passe doit être le même!";
            return false;
        }

        confirmPasswordError = "";
        return true;
    }
}
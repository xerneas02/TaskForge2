@page "/pokedex"
@using Front.Services

<h3>Pokedex</h3>

<PageTitle>Pokedex</PageTitle>

@if (pokedex == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Numero</th>
                <th>Nom</th>
                <th>Type</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pokemon in pokedex)
            {
                <tr>
                    <td>@pokemon.Id</td>
                    <td>@pokemon.Nom</td>
                    <td><img src="@pokemon.TypeImageUrl" alt="@pokemon.Type" class="type"/></td>
                    <td><img src="@pokemon.PokemonImageUrl" alt="@pokemon.Nom" class="pokemon" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PokemonTemplate[]? pokedex;

    [Inject]
    private HttpClient? HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        pokedex = await HttpClient!.GetFromJsonAsync<PokemonTemplate[]>("http://localhost:5227/api/PokemonTemplate");

        if (pokedex == null) throw new Exception("Error in loading pokemons.");
        
        foreach (var pokemon in pokedex!)
        {
            pokemon.TypeImageUrl = $"Images/pokemonImages/type/{(((int)pokemon.Type!)-1).ToString()}.png";
            pokemon.PokemonImageUrl = $"Images/pokemonImages/regular/%23{pokemon.Id:D4}.png";
        }
    }

    private class PokemonTemplate
    {
        public int Id { get; set; }
        public string? Nom { get; set; }
        public PokemonType? Type { get; set; }
        public string? TypeImageUrl { get; set; }
        public string? PokemonImageUrl { get; set; }
    }
}
